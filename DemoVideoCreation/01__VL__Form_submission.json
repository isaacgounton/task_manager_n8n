{
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        400,
        300
      ],
      "id": "8409ea07-193e-4b3c-814b-45ba3e7e463a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "QPZnBdHx3ZTb2QZi",
          "name": "OpenAi account MILL"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Subject description\": \"A thoughtful young woman pauses on a neon-lit city street, ...\",\n  \"Clothing or accessories\": \"black leather jacket, red scarf\",\n  \"Lighting style\": \"dramatic neon highlights with deep shadows\",\n  \"Background\": \"rain-slicked pavement reflecting colorful signs\",\n  \"Sound text\": \"Hey! Should I ride this bike? Should I steal it? What do you suggest?\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        600,
        280
      ],
      "id": "a658ac66-1207-4847-a06a-012d3af3ec1f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "content": "## Form for calling from WEB\n",
        "height": 460,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        360,
        0
      ],
      "id": "d6482d0e-7a4d-4449-9efb-3ef5ab1be700",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Image Prompt Agent (LangChain OpenAI Flow)\nThis node flow generates enriched and stylized prompt data for image creation using OpenAI (via LangChain).\n\n#### üîó Connected Nodes:\n- **Image_Prompt_Agent**: Core logic that rewrites and formats the user‚Äôs input into a structured creative JSON.\n- **OpenAI Chat Model**: GPT-4.1-mini used as the LLM engine.\n- **Structured Output Parser**: Enforces schema compliance for JSON output.\n\n#### üìù Input:\n- Comes from the **FORM** node with fields:\n  - `Subject Description`\n  - `Lighting Style`\n  - `Background`\n  - `Sound Text`\n\n#### üé® Output JSON Fields:\n```json\n{\n  \"Subject description\": \"...\",          // Creative rewrite\n  \"Lighting style\": \"...\",               // Enhanced lighting notes\n  \"Background\": \"...\",                   // Enriched scene background\n  \"Sound text\": \"...\"                    // Grammar-corrected text\n}\n",
        "height": 560,
        "width": 1040,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        480
      ],
      "id": "d0151eb6-318d-4519-afc3-07fbe9ba0087",
      "name": "Sticky Note: Form Documentation"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('GenerateUniqueID').item.json.webhook_url}}/webhook/ImageCreation",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "TaskID",
              "value": "={{ $json.task_id }}"
            },
            {
              "name": "external_id",
              "value": "={{ $json.external_id }}"
            },
            {
              "name": "webhook_url",
              "value": "={{ $('GenerateUniqueID').item.json.webhook_url}}"
            },
            {
              "name": "webhook_url_taskman",
              "value": "={{ $('GenerateUniqueID').item.json.webhook_url_taskman}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1020,
        340
      ],
      "id": "e0d31763-a05c-4642-b30c-25b99a5fe652",
      "name": "TriggerWorkflow"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('GenerateUniqueID').item.json.webhook_url_taskman}}/webhook/create-task",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "task_type",
              "value": "data_processing"
            },
            {
              "name": "external_id",
              "value": "={{ $json.external_id }}"
            },
            {
              "name": "metadata",
              "value": "={ \n  \"workflow\": \"{{ $('Workflow-Execution').item.json.workflow }}\", \n  \"execution\": \"{{ $('Workflow-Execution').item.json.execution }}\",\n  \"webhook_url\": \"{{ $('GenerateUniqueID').item.json.webhook_url}}\",\n  \"webhook_url_taskman\": \"{{ $('GenerateUniqueID').item.json.webhook_url_taskman}}\"\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        180,
        320
      ],
      "id": "b35fd930-a286-4bfb-a30f-ea73a1a264e5",
      "name": "TM_SIMPLE_NODE",
      "credentials": {
        "httpBearerAuth": {
          "id": "x1NwvfmOBn59qCFq",
          "name": "Task Manager DEMO AUTH"
        },
        "httpBasicAuth": {
          "id": "tOKuohk9XqCLpfXA",
          "name": "Unnamed credential"
        },
        "httpHeaderAuth": {
          "id": "ls9itmRH8ZrWv4rJ",
          "name": "TaskManager DEMO AUTH"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "Exagerated Pixar Style",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Image to reference",
              "placeholder": "Add here an URL of the image, if you want to use it like a reference."
            },
            {
              "fieldLabel": "Subject Description",
              "placeholder": "(Short description if no image, e.g., \"young man with curly hair and glasses\")",
              "requiredField": true
            },
            {
              "fieldLabel": "Exaggeration Level",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Low (subtle)"
                  },
                  {
                    "option": "Medium (Pixar-style)"
                  },
                  {
                    "option": "High (strong cartoon)"
                  },
                  {
                    "option": "Extreme (wild caricature)"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Visual Style",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Pixar-style"
                  },
                  {
                    "option": "3D Toon"
                  },
                  {
                    "option": "Painterly Illustration"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Lighting Style",
              "placeholder": "(optional: Soft  Studio lighting  Natural daylight  Dramatic / cinematic)"
            },
            {
              "fieldLabel": "Background",
              "placeholder": "(optional: color, gradient, outdoor scenery, etc.)"
            },
            {
              "fieldLabel": "Sound Text",
              "placeholder": "Add here your text for narration"
            },
            {
              "fieldLabel": "Generate voice",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "No"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Choose model for Video",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Kling"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Format",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "16:9"
                  },
                  {
                    "option": "9:16"
                  },
                  {
                    "option": "1:1"
                  },
                  {
                    "option": "3:4"
                  },
                  {
                    "option": "4:3"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Eleven Labs Voice (W/M)",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "esy0r39YPLQjOczyOib82"
                  },
                  {
                    "option": "TumdjBNWanlT3ysvclWh"
                  }
                ]
              }
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        0,
        80
      ],
      "id": "e41877af-4986-4d35-afdf-19a9fa2c7f29",
      "name": "FORM",
      "webhookId": "84badef0-365d-489c-a350-75279e32d634",
      "credentials": {
        "httpBasicAuth": {
          "id": "tOKuohk9XqCLpfXA",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={\nSubject description: \"{{ $('FORM').item.json['Subject Description'] }}\",\nLighting stle: \"{{ $('FORM').item.json['Lighting Style'] }}\",\nBackground: \"{{ $('FORM').item.json.Background }}\",\nSound text: \"{{ $('FORM').item.json['Sound Text'] }}\"\n}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are given the following input fields from a user‚Äôs sheet:\n\n{\n  \"Subject Description\": \"{{ $json['Subject Description'] }}\",\n  \"Lighting Style\": \"{{ $json['Lighting Style'] }}\",\n  \"Background\": \"{{ $json.Background }}\",\n  \"Sound Text\": \"{{ $json['Sound Text'] }}\"\n}\n\nPlease produce a JSON object with these exact keys:\n{\n  \"Subject description\": \"...\",\n  \"Clothing or accessories\": \"...\",\n  \"Lighting style\": \"...\",\n  \"Background\": \"...\",\n  \"Sound text\": \"...\"\n}\n\n**Rules:**\n1. **Subject description** ‚Äì rewrite it to be more vivid and creative (e.g. add mood, emotion, tiny narrative flourishes), character details if exist.\n2. **Lighting style** ‚Äì take the input value and adapt it to the scene, suggesting any additional touches (e.g. ‚Äúwarm sunset glow with soft shadows‚Äù).\n3. **Background** ‚Äì enrich the user‚Äôs background input with specific details (e.g. color palette, added props or environment elements).\n4. **Sound text** ‚Äì do **not** alter meaning; only correct grammar or punctuation, and return it in the same language as the input.\n\n**Output** must be valid JSON with **no extra commentary**. For example:\n\n\n{\n  \"Subject description\": \"A thoughtful young woman pauses on a neon-lit city street, ...\",\n  \"Clothing or accessories\": \"black leather jacket, red scarf\",\n  \"Lighting style\": \"dramatic neon highlights with deep shadows\",\n  \"Background\": \"rain-slicked pavement reflecting colorful signs\",\n  \"Sound text\": \"Hey! Should I ride this bike? Should I steal it? What do you suggest?\"\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        420,
        80
      ],
      "id": "5274488f-1bd6-4c92-b74d-c7b0035473be",
      "name": "Image_Prompt_Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('GenerateUniqueID').item.json.webhook_url_taskman}}/webhook/ade4dfea-d284-4c02-95f0-4deeb1435983/update-task/{{ $('TM_SIMPLE_NODE').item.json.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $(\"CreateJSON\").item.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        340
      ],
      "id": "86acc784-48a2-4de2-9c0f-55e83f2eba23",
      "name": "TM_SetStatus_COMPLETE",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ls9itmRH8ZrWv4rJ",
          "name": "TaskManager DEMO AUTH"
        }
      }
    },
    {
      "parameters": {
        "content": "## Trigger + Task  Manager Nods",
        "height": 460,
        "width": 360,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        0
      ],
      "id": "ca392ee2-bbef-424c-8928-b4110ef0121c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Task  Manager Nods",
        "height": 460,
        "width": 480,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        0
      ],
      "id": "6bc3377b-2e22-42d9-8255-120d005f35e2",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "// WEBHOOK_URL is your N8N URL and WEBHOOK_URL_TASKMAN is for TaskManager URL if differ. If not, use the same URL like on WEBHOOK_URL\nconst WEBHOOK_URL = \"https://dev.mindstreamai.app\";\nconst WEBHOOK_URL_TASKMAN = \"https://dev.mindstreamai.app\";\n \n// Leave as \"\" if no prefix is needed, or set to something like \"R31-\"\n// PREFIX can be adjusted to any project or environment indicator like \"TASK-\", \"UAT-\", etc.\nconst PREFIX = \"DEMO-\";\n\nfor (const item of $input.all()) {\n  // Generate unique 16-character alphanumeric ID\n  const uniquePart = [...Array(16)].map(() => Math.random().toString(36)[2]).join('');\n\n  // Combine optional prefix with unique ID\n  item.json.external_id = `${PREFIX}${uniquePart}`;\n\n  // Set webhook URLs\n  item.json.webhook_url = WEBHOOK_URL;\n  item.json.webhook_url_taskman = WEBHOOK_URL_TASKMAN;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        40,
        320
      ],
      "id": "d9c89cdf-ac5a-4d19-9987-42e1a9ac0474",
      "name": "GenerateUniqueID"
    },
    {
      "parameters": {
        "content": "### TM_SIMPLE_NODE\nCreates a task in Task Manager using a POST request to the `/create-task` endpoint.\n\n**Required Setup:**\n- Auth: `httpHeaderAuth` (set in credentials)\n- URL: Fixed to `https://YOUR_URL/webhook/create-task`\n- JSON Body Parameters:\n  - `task_type`: _(Differs by workflow ‚Äî see below)_\n  - `external_id`: Populated via dynamic expression (unique number to be easy to follow the full job)\n\n**Task Type by Workflow:**\n- Workflow 1: `\"data_processing\"`\n- Workflow 2: `\"image_processing\"`\n- Workflow 3: `\"video_processing\"`\n- Workflow 4: `\"audio_processing\"`\n- Workflow 5: `\"lipsync_processing\"`\n\n‚ö†Ô∏è **Key Difference:** Only the `task_type` and the way `external_id` is populated differ. Make sure `external_id` is from the correct JSON context (e.g., `{{$json.external_id}}` vs `{{$json.body.external_id}}`).\n",
        "height": 440,
        "width": 1000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1080,
        0
      ],
      "id": "53c40eed-5a9f-4320-a0ce-1d7b70c5894b",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "### GenerateUniqueID\nGenerates a unique 16-character alphanumeric ID and adds it to each item as `external_id`.\n\n**Key Behavior:**\n- Iterates over all items\n- Adds `external_id` key to the JSON with a random ID\n\nüìå **Used before TM_SIMPLE_NODE** to ensure unique `external_id` per request.\n",
        "height": 200,
        "width": 1000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1080,
        460
      ],
      "id": "e18294e0-412e-49ae-acd0-49810b88656e",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "### FORM (Request Input)\nDisplays a UI form for user input to guide AI video generation. Trigger node.\n\n**Required Fields:**\n- Subject Description\n- Exaggeration Level (Dropdown)\n- Visual Style (Dropdown)\n- Format (Dropdown)\n\n**Optional Inputs:**\n- Reference image URL\n- Lighting, Background\n- Sound Text\n- Voice & Model Selection (Kling model, ElevenLabs voice)\n\nüìå Used as a user input form for initiating Pixar-style video tasks.\n",
        "height": 360,
        "width": 580
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1080,
        680
      ],
      "id": "b7a4b065-2c66-4470-a87d-711f4f6fb174",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "### TM_GetStatus\nFetches current task status using `TaskID` in URL path.\n\n**Dynamic URL:**  \n`/task-status/{{ $('Webhook').item.json.body.TaskID }}`\n\n**Auth:** httpHeaderAuth  \n**Method:** GET by default (uses POST structure but GET endpoint)\n\nüìå **Used to poll task status** before updating its state.\n",
        "height": 280,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        680
      ],
      "id": "74c11ade-509e-4acc-824f-e870d8ece525",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "### TM_SetStatus_COMPLETE\nMarks the task as `\"completed\"` and sends a `POST` request to Task Manager with result metadata.\n\n**URL Format:**  \n`/update-task/{{ $('TM_SIMPLE_NODE').item.json.task_id }}`\n\n**Authentication:** `httpHeaderAuth`\n\n**Body Content:** JSON object with:\n- `\"status\": \"completed\"`\n- `\"result\"` object with task details from various sources (e.g., FORM, TM_GetStatus, JSON)\n\nüü¢ **Custom Result Properties:**\nEach workflow adds different fields based on its output:\n- `Final_Image`, `Video_RES`, `Video_Lipsync`, `Audio_MP3` (varies by task type)\n- Fields pulled from:\n  - `TM_GetStatus` node (most workflows)\n  - `FORM` or `Image_Prompt_Agent` nodes (Pixar/Image form-based workflows)\n\nüõ†Ô∏è **Key Differences Across Workflows:**\n| Workflow Type | Dynamic Fields in `result`                                  |\n|---------------|--------------------------------------------------------------|\n| Image         | Uses FORM + Agent node data (Background, Style, etc.)       |\n| Video         | Adds `Final_Image` and uses results from `TM_GetStatus`     |\n| Audio         | Adds `Final_Image`, `Video_RES`, `Audio_MP3`                |\n| Lipsync       | Adds `Final_Image`, `Video_RES`, `Video_Lipsync`, `Audio_MP3`|\n\nüìå Ensure that source nodes (`$('X').item.json.result.Y`) exist and return expected structure.\n",
        "height": 600,
        "width": 820
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1240,
        0
      ],
      "id": "edb1de36-753c-47d6-9d99-106af27b2250",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "### TriggerWorkflow\nTriggers a secondary workflow via HTTP `POST`, forwarding TaskID and `external_id`.\n\n**Target URLs:**  \nEach variant hits a different webhook endpoint:\n- Image: `/webhook/ImageCreation`\n- Video: `/webhook/VideoCreation`\n- Audio: `/webhook/AudioCreation`\n- Lipsync: `/webhook/LipsyncCreation`\n- Generic UUID-based: `/webhook/UUID`\n\n**Payload:**\n```json\n{\n  \"TaskID\": \"{{ $json.task_id }}\",\n  \"external_id\": \"{{ $json.external_id }}\" or \"{{ $('Webhook').item.json.body.external_id }}\"\n}\n",
        "height": 420,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1020,
        620
      ],
      "id": "11ea358e-2062-402b-83dc-488d6564db08",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"status\": \"completed\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        820,
        60
      ],
      "id": "7ea7b7a7-1970-4d8b-af9e-5bde8a7620f2",
      "name": "OutsideJSON"
    },
    {
      "parameters": {
        "jsCode": "// merge helper for the other two nodes\nconst inside  = $node[\"InsideJSON\"].json ?? {};\nconst outside = ($node[\"OutsideJSON\"].json?.result) ?? {};\n\nreturn [\n  {\n    json: {\n      status: $node[\"OutsideJSON\"].json?.status ?? 'unknown',\n      result: {\n        ...inside,\n        ...outside,\n      },\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        200
      ],
      "id": "3453742b-5a88-40cc-8892-6388a27aab8e",
      "name": "CreateJSON"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2d11727f-0a9b-45e6-b716-104bb14a5a36",
              "name": "task_id",
              "value": "={{ $('TM_SIMPLE_NODE').item.json.task_id }}",
              "type": "string"
            },
            {
              "id": "699c591a-04b2-4ec5-a701-a7a1ffa9caf2",
              "name": "output",
              "value": "={{ $('Image_Prompt_Agent').item.json.output }}",
              "type": "object"
            },
            {
              "id": "9baa08fa-20d4-462f-9456-02a6fbb332ed",
              "name": "output.Form",
              "value": "={{ $('FORM').item.json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        820,
        200
      ],
      "id": "53539877-340e-4c2f-a610-1031e831db70",
      "name": "InsideJSON"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "482b635c-43a5-4857-b66e-c68f1796cbca",
              "name": "workflow",
              "value": "={{ $workflow.id }}",
              "type": "string"
            },
            {
              "id": "65bb894b-64fc-41ff-9a6a-5840b692b1f5",
              "name": "execution",
              "value": "={{ $execution.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        140,
        80
      ],
      "id": "d90a759b-c929-42f9-aead-783169eb3b94",
      "name": "Workflow-Execution"
    }
  ],
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Image_Prompt_Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Image_Prompt_Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "TM_SIMPLE_NODE": {
      "main": [
        [
          {
            "node": "Image_Prompt_Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FORM": {
      "main": [
        [
          {
            "node": "Workflow-Execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image_Prompt_Agent": {
      "main": [
        [
          {
            "node": "OutsideJSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TM_SetStatus_COMPLETE": {
      "main": [
        [
          {
            "node": "TriggerWorkflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GenerateUniqueID": {
      "main": [
        [
          {
            "node": "TM_SIMPLE_NODE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OutsideJSON": {
      "main": [
        [
          {
            "node": "InsideJSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreateJSON": {
      "main": [
        [
          {
            "node": "TM_SetStatus_COMPLETE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InsideJSON": {
      "main": [
        [
          {
            "node": "CreateJSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow-Execution": {
      "main": [
        [
          {
            "node": "GenerateUniqueID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "FORM": [
      {
        "Image to reference": "",
        "Subject Description": "young woman with rosy cheeks and sweet blue eyes with rocker jacket riding a motorcycle",
        "Exaggeration Level": "Low (subtle)",
        "Visual Style": "Pixar-style",
        "Lighting Style": "dramatic",
        "Background": "biker bar with neon signs and motorcycles",
        "Sound Text": "Hey! Should I ride this bike? Should I steal it? What do you suggest?",
        "Generate voice": "Yes",
        "Choose model for Video": "Kling",
        "Format": "9:16",
        "Eleven Labs Voice (W/M)": "z7U1SjrEq4fDDDriOQEN"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "306de76e4b7b868087c011f08075d5bdab5fdc016494a71df11c97368feac0db"
  }
}