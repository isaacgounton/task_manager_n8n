{
  "name": "N8N Task Update Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-task/:taskId",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "da8512d8-8bf6-457e-9f1a-a843f733a6e1",
      "name": "Webhook - Update Task",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -120,
        260
      ],
      "webhookId": "ade4dfea-d284-4c02-95f0-4deeb1435983"
    },
    {
      "parameters": {
        "jsCode": "// Extract data from webhook\nconst taskId = $input.item.json.params.taskId;\nconst updateData = $input.item.json.body;\n\n// Prepare update fields\nconst updates = {\n  task_id: taskId,  // Include for response\n  updated_at: new Date().toISOString()\n};\n\n// Only include fields that were provided\nif (updateData.status) updates.status = updateData.status;\nif (updateData.result !== undefined) updates.result = updateData.result;\nif (updateData.error_message !== undefined) updates.error_message = updateData.error_message;\nif (updateData.metadata !== undefined) updates.metadata = updateData.metadata;\nif (updateData.attempt_count !== undefined) updates.attempt_count = updateData.attempt_count;\n\nreturn [{ json: updates }];"
      },
      "id": "1b8dfe10-1e94-41b7-a9bf-364792d6b9e9",
      "name": "Prepare Update Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Webhook - Update Task').item.json.body.status }}",
              "operation": "equal",
              "value2": "={{ $json.status }}"
            }
          ]
        }
      },
      "id": "f9acefdf-17e5-4dbc-82f7-b69f96938c74",
      "name": "Update Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        540,
        260
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "id": "20ff7d1c-ae25-49aa-bed2-850a1e525e72",
      "name": "Respond - Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        780,
        180
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"message\": \"Error: Update failed\",\n  \"task_id\": \"{{ $json.task_id }}\",\n  \"updated_at\": \"{{ $json.updated_at }}\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "id": "32befea1-0f61-49f9-946c-2994e0e9b40e",
      "name": "Respond - Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        780,
        360
      ]
    },
    {
      "parameters": {
        "content": "# Update Task Workflow\n\nThis workflow is designed to handle updates to a task via a webhook endpoint. The incoming request provides task updates, which are processed, conditionally checked, updated in a PostgreSQL database, and responded to with success or error messages.\n\nüì¨ 1. Webhook ‚Äì Webhook - Update Task\nNode Type: Webhook\nMethod: POST\nPath: /update-task/:taskId\nResponse Mode: responseNode\n\nüîç Purpose:\nThis webhook listens for HTTP POST requests at the endpoint:\n/webhook/ade4dfea-d284-4c02-95f0-4deeb1435983/update-task/:taskId\n\n## Supported Fields:\n- status: 'pending' | 'in_progress' | 'completed' | 'failed'\n- result: JSON object with results\n- error_message: String with error details\n- metadata: JSON object with custom data\n- attempt_count: Number\n\n## Example:\n```bash\ncurl -X POST https://URL/webhook/ade4dfea-d284-4c02-95f0-4deeb1435983/update-task/:taskId \\\n  -H \"Authorization: API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"status\": \"completed\",\n    \"result\": {\"success\": true}\n  }'\n```\n\n‚úÖ Use Cases\nUpdating task statuses from external services or microservices.\nLogging retry attempts or error metadata in task execution.\nProviding a RESTful endpoint to interact with Supabase-managed task data.",
        "height": 840,
        "width": 1000
      },
      "id": "e250b5ac-26a8-4714-87b4-0d8d80efb5d9",
      "name": "Update Task Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -120,
        -700
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "task_manager",
          "mode": "list",
          "cachedResultName": "task_manager"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "task_id": "={{ $json.task_id }}",
            "status": "={{ $json.status }}",
            "updated_at": "={{ $json.updated_at }}",
            "result": "={{ $json.result }}",
            "attempt_count": 0,
            "max_attempts": 0,
            "timeout_minutes": 0
          },
          "matchingColumns": [
            "task_id"
          ],
          "schema": [
            {
              "id": "task_id",
              "displayName": "task_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "external_id",
              "displayName": "external_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "poll_url",
              "displayName": "poll_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "poll_method",
              "displayName": "poll_method",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "task_type",
              "displayName": "task_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "result",
              "displayName": "result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "attempt_count",
              "displayName": "attempt_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "max_attempts",
              "displayName": "max_attempts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "timeout_minutes",
              "displayName": "timeout_minutes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        320,
        260
      ],
      "id": "939198ca-d5a0-45ff-8d1d-a8ef2f32f11b",
      "name": "Postgres",
      "alwaysOutputData": true,
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "QS2nSiDzjJ5ExoHs",
          "name": "SupaBase-N8N"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Update Task": {
      "main": [
        [
          {
            "node": "Prepare Update Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Data": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Successful?": {
      "main": [
        [
          {
            "node": "Respond - Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond - Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Update Successful?",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "kByCQTr1nYAUTU2a"
  },
  "versionId": "14e5a518-f35f-4beb-a279-00b54c819bf3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "306de76e4b7b868087c011f08075d5bdab5fdc016494a71df11c97368feac0db"
  },
  "id": "GUCREG7qqSKJApHi",
  "tags": []
}